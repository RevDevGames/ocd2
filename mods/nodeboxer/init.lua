local width = 16
local length = 16
local height = 16
local resolution = 5

local place_ori = nil
local place_one = nil
local place_two = nil

local node_num = 0
local node_box = {}
local node_box_string = {}

local function test()
  minetest.register_node("nodeboxer:test", {
    drawtype = "nodebox",
    paramtype = "light",
    groups = {dig_immediate=3,not_in_creative_inventory=1},
    tiles = {"wool_blue.png"},
    node_box = { --VanessaE's wild hive nodebox contribution
      type = "fixed",
      fixed = {
        --{-8/16, -8/16, -8/16, -6/16, 6/16, -6/16},
        {-8/16, 6/16, -8/16, 8/16, 8/16, 8/16},
        {6/16, -8/16, 6/16, 8/16, 6/16, 8/16},
        {-8/16, -8/16, 6/16, -6/16, 6/16, 8/16},
        {6/16, -8/16, -8/16, 8/16, 6/16, -6/16},
      }
    },
  })
end

minetest.register_node("nodeboxer:spawn", {--register wild plant
  tiles = {"default_stone.png"},
  drawtype = "node",
  description = "Nodeboxer",
  groups = {not_in_creative_inventory=1, snappy = 3,flammable=2, attached_node=1},
  on_rightclick = function(pos)
    place_one = nil
    place_two = nil
    place_ori = pos
    node_num = 0
    for x=1, resolution, 1 do
      for y=1, resolution, 1 do
        for z=1, resolution, 1 do
          local pos = {x=pos.x+x,y=pos.y+y,z=pos.z+z}
          minetest.set_node(pos, {name = "nodeboxer:grid"})
          local meta = minetest.get_meta(pos)
        end
      end
    end
    
    
  end,
  on_construct = function(pos, node)
    
    for x=0, resolution+1, 1 do
      for y=0, resolution+1, 1 do
        for z=0, resolution+1, 1 do
          local a = x+y+z
          if ( a ~= 0) then
            minetest.remove_node({x=pos.x+x,y=pos.y+y,z=pos.z+z})
          end
        end
      end
    end
    
    place_ori = pos
    for x=1, resolution, 1 do
      for y=1, resolution, 1 do
        for z=1, resolution, 1 do
          local pos = {x=pos.x+x,y=pos.y+y,z=pos.z+z}
          minetest.set_node(pos, {name = "nodeboxer:grid"})
          local meta = minetest.get_meta(pos)
        end
      end
    end
  end,
  on_destruct = function(pos, node, digger)
    for x=1, resolution, 1 do
      for y=1, resolution, 1 do
        for z=1, resolution, 1 do
          minetest.remove_node({x=pos.x+x,y=pos.y+y,z=pos.z+z})
        end
      end
    end
    local place_one = nil
    local place_two = nil
  end,
  on_punch = function(pos)
    print("{")
    for i=1, node_num, 1 do
      print(node_box_string[i])
    end
    print("}")
  end,
})

minetest.register_node("nodeboxer:grid", {--register wild plant
  drawtype = "glasslike",
  paramtype = "light",
  groups = {dig_immediate=3,not_in_creative_inventory=1},
  light_source = 12,
  drop = "nodeboxer:paint",
  tiles = {"nodeboxer_wire.png"},
  sunlight_propagates = true,
  --buildable_to = true,
  pointable = true,
  walkable = false,
	climbable = true,
})

minetest.register_node("nodeboxer:draw", {
  paramtype = "light",
  groups = {dig_immediate=3,not_in_creative_inventory=1},
  tiles = {"wool_red.png"},
  pointable = true,
  buildable_to = true,
  after_place_node = function(pos)
    if place_one == nil then
      place_one = pos
      print("first pos")
    elseif place_two == nil then
      place_two = pos
      print("second pos")

      if place_ori == nil then return end
      
      local min_x = math.min(place_one.x, place_two.x)
      local min_y = math.min(place_one.y, place_two.y)
      local min_z = math.min(place_one.z, place_two.z)

      local max_x = math.max(place_one.x, place_two.x)
      local max_y = math.max(place_one.y, place_two.y)
      local max_z = math.max(place_one.z, place_two.z)

      node_num = node_num + 1
      print(node_num)
      node_box[node_num] = {{x=min_x, y=min_y, z=min_z},{x=max_x, y=max_y, z=max_z}}
      node_box_string[node_num] = "\t".."{"..(min_x-place_ori.x-(resolution/2+1)).."/"..resolution..", "..(min_y-place_ori.y-(resolution/2+1)).."/"..resolution..", "..(min_z-place_ori.z-(resolution/2+1)).."/"..resolution..", "..(max_x-place_ori.x-(resolution/2)).."/"..resolution..", "..(max_y-place_ori.y-(resolution/2)).."/"..resolution..", "..(max_z-place_ori.z-(resolution/2)).."/"..resolution.."},"
      print(node_box_string[node_num])
      place_one = nil
      place_two = nil
      for x=min_x, max_x, 1 do
        for y=min_y, max_y, 1 do
          for z=min_z, max_z, 1 do
            --categorized[x.."-"..y.."-"..z] = nil
            minetest.add_node({x=x,y=y,z=z}, {name="nodeboxer:paint"})
          end
        end
      end
    end
  end,
})

minetest.register_node("nodeboxer:paint", {
  paramtype = "light",
  groups = {dig_immediate=3,not_in_creative_inventory=1},
  tiles = {"wool_blue.png"},
  pointable = true,
  walkable = false,
	climbable = true,
  after_destruct = function(pos)
    minetest.set_node(pos, {name = "nodeboxer:grid"})
  end,
})

local node_boxes = {
  {
    {-8/16, -8/16, -8/16, -7/16, 7/16, -7/16},
    {-8/16, 7/16, -8/16, 8/16, 8/16, 8/16},
    {7/16, -8/16, 7/16, 8/16, 7/16, 8/16},
    {-8/16, -8/16, 7/16, -7/16, 7/16, 8/16},
    {7/16, -8/16, -8/16, 8/16, 7/16, -7/16},
    {-7/16, 5/16, -8/16, 7/16, 6/16, -7/16},
    {-8/16, 5/16, -7/16, -7/16, 6/16, 7/16},
    {-7/16, 5/16, 7/16, 7/16, 6/16, 8/16},
    {7/16, 5/16, -7/16, 8/16, 6/16, 7/16},
  },
  {--table
    {-8/16, -8/16, -8/16, -6/16, 6/16, -6/16},
    {-8/16, -8/16, 6/16, -6/16, 6/16, 8/16},
    {6/16, -8/16, 6/16, 8/16, 6/16, 8/16},
    {6/16, -8/16, -8/16, 8/16, 6/16, -6/16},
    {-8/16, 6/16, -8/16, 8/16, 8/16, 8/16},
  },
  {
    {-8/16, -1/16, -8/16, 8/16, 1/16, 8/16},
    {-8/16, -8/16, -8/16, -6/16, -1/16, -6/16},
    {-8/16, -8/16, 6/16, -6/16, -1/16, 8/16},
    {6/16, -8/16, 6/16, 8/16, -1/16, 8/16},
    {6/16, -8/16, -8/16, 8/16, -1/16, -6/16}
  },

  {
    
    {-8/16, -3/16, -5/16, 8/16, -2/16, 5/16},
    {7/16, -8/16, -5/16, 8/16, -3/16, -4/16},
    {7/16, -8/16, 4/16, 8/16, -3/16, 5/16},
    {-8/16, -8/16, 4/16, -7/16, -3/16, 5/16},
    {-8/16, -8/16, -5/16, -7/16, -3/16, -4/16},
    {-7/16, -6/16, -4/16, 7/16, -5/16, 4/16},
  },
  {
    {-8/16, 2/16, -8/16, -4/16, 3/16, 8/16},
    {-8/16, 3/16, -6/16, -5/16, 7/16, -4/16},
    {-8/16, 3/16, -4/16, -6/16, 6/16, -3/16},
    {-8/16, 3/16, -3/16, -4/16, 7/16, -2/16},
    {-8/16, 3/16, -2/16, -5/16, 7/16, -1/16},
    {-8/16, 3/16, -1/16, -4/16, 8/16, 0/16},
    {-8/16, 3/16, 0/16, -5/16, 6/16, 2/16},
    {-8/16, 3/16, 2/16, -5/16, 7/16, 3/16},
    {-8/16, 3/16, 3/16, -6/16, 6/16, 4/16},
    {-8/16, 3/16, 4/16, -5/16, 6/16, 6/16},
  },
  {
    {-8/16, 2/16, -8/16, -4/16, 3/16, 8/16},
  },
  {
    {7/16, -8/16, -2/16, 8/16, 8/16, 2/16},
    {4/16, -8/16, -2/16, 7/16, -7/16, 2/16},
    {4/16, -4/16, -2/16, 7/16, -3/16, 2/16},
    {4/16, 0/16, -2/16, 7/16, 1/16, 2/16},
    {4/16, 4/16, -2/16, 7/16, 5/16, 2/16},
  },
  {
    {-8/16, -8/16, -8/16, -6/16, 6/16, 8/16},
    {-8/16, 6/16, -8/16, 8/16, 8/16, 8/16},
  },
  {
    {-8/16, 6/16, -8/16, 8/16, 8/16, 8/16},
  },
  {
    {-8/16, -8/16, -8/16, -7/16, 8/16, 8/16},
    {-7/16, 7/16, -8/16, 8/16, 8/16, 8/16},
    {0/16, -8/16, -8/16, 1/16, 7/16, 8/16},
    {-7/16, -1/16, -8/16, 8/16, 0/16, 8/16},
  },
  {
    {-1/16, -6/16, -8/16, 1/16, 6/16, -7/16},
    {-1/16, 6/16, -7/16, 1/16, 7/16, -6/16},
    {-1/16, 7/16, -6/16, 1/16, 8/16, 6/16},
    {-1/16, 6/16, 6/16, 1/16, 7/16, 7/16},
    {-1/16, -6/16, 7/16, 1/16, 6/16, 8/16},
    {-4/16, -6/16, 7/16, 4/16, -4/16, 8/16},
    {3/16, -7/16, 7/16, 5/16, -5/16, 8/16},
    {3/16, -8/16, 7/16, 5/16, -7/16, 8/16},
    {-5/16, -7/16, 7/16, -3/16, -5/16, 8/16},
    {-5/16, -8/16, 7/16, -3/16, -7/16, 8/16},
    {-4/16, -6/16, -8/16, 4/16, -4/16, -7/16},
    {3/16, -7/16, -8/16, 5/16, -5/16, -7/16},
    {3/16, -8/16, -8/16, 5/16, -7/16, -7/16},
    {-5/16, -7/16, -8/16, -3/16, -5/16, -7/16},
    {-5/16, -8/16, -8/16, -3/16, -7/16, -7/16},
    {-1/16, 8/16, -6/16, 1/16, 9/16, -5/16},
    {-1/16, 8/16, 5/16, 1/16, 9/16, 6/16},
  },
  {
    {-1/16, -8/16, -3/16, 1/16, -7/16, 3/16},
    {-3/16, -8/16, -1/16, 3/16, -7/16, 1/16},
    {-2/16, -8/16, -2/16, 2/16, -7/16, 2/16},
    {-1/16, -7/16, -1/16, 1/16, -6/16, 1/16},
  },
  {
    {2/16, 0/16, -2/16, 5/16, 1/16, 2/16},
    {1/16, 0/16, -1/16, 2/16, 1/16, 1/16},
    {-1/16, -1/16, -1/16, 1/16, 0/16, 1/16},
    {-2/16, -2/16, -1/16, -1/16, -1/16, 0/16},
    {-2/16, -2/16, -1/16, -1/16, -1/16, 1/16},
    {-3/16, -4/16, -1/16, -2/16, -2/16, 1/16},
    {-4/16, -5/16, -1/16, -3/16, -4/16, 1/16},
    {-4/16, -7/16, -1/16, -3/16, -4/16, 1/16},
    {-5/16, -8/16, -1/16, -4/16, -6/16, 1/16},
    {-7/16, -8/16, -1/16, -1/16, -7/16, 1/16},
    {-5/16, -8/16, -3/16, -3/16, -7/16, 3/16},
    {-6/16, -8/16, -2/16, -2/16, -7/16, 2/16},
  },
  {--plate and knives
    {1/16, -8/16, -1/16, 2/16, -7/16, 1/16},
    {-1/16, -8/16, 1/16, 1/16, -7/16, 2/16},
    {-2/16, -8/16, -1/16, -1/16, -7/16, 1/16},
    {-1/16, -8/16, -2/16, 1/16, -7/16, -1/16},
    {-3/16, -7/16, -3/16, 3/16, -6/16, 3/16},
    {-3/16, -6/16, 3/16, 3/16, -5/16, 4/16},
    {3/16, -6/16, -3/16, 4/16, -5/16, 3/16},
    {-3/16, -6/16, -4/16, 3/16, -5/16, -3/16},
    {-4/16, -6/16, -3/16, -3/16, -5/16, 3/16},
    {-5/16, -8/16, 4/16, -4/16, -7/16, 8/16},
    {-7/16, -8/16, 4/16, -6/16, -7/16, 8/16},
    {5/16, -8/16, -4/16, 6/16, -7/16, 5/16},
    {4/16, -8/16, 5/16, 7/16, -7/16, 8/16},
    {-6/16, -8/16, -4/16, -5/16, -7/16, 5/16},
  },
  {--tulip
    {-1/16, -8/16, -2/16, 1/16, -3/16, 0/16}, 
    {-3/16, -3/16, -2/16, 3/16, -2/16, 0/16},
    {-1/16, -3/16, -4/16, 1/16, -2/16, 2/16},
    {-3/16, -2/16, -2/16, -2/16, 0/16, 0/16},
    {-1/16, -2/16, 1/16, 1/16, 0/16, 2/16},
    {2/16, -2/16, -2/16, 3/16, 0/16, 0/16},
    {-1/16, -2/16, -4/16, 1/16, 0/16, -3/16},
    {-1/16, 0/16, -3/16, 1/16, 1/16, -2/16},
    {-2/16, 0/16, -2/16, -1/16, 1/16, 0/16},
    {-1/16, 0/16, 0/16, 1/16, 1/16, 1/16},
    {1/16, 0/16, -2/16, 2/16, 1/16, 0/16},
    {-1/16, -2/16, -2/16, 1/16, -1/16, 0/16},
  },
  {--bonsai sapling
    {-1/16, -8/16, -1/16, 1/16, 0/16, 1/16},
    {0/16, -1/16, -2/16, 2/16, 0/16, 2/16},
    {-2/16, -2/16, -2/16, 2/16, -1/16, 0/16},
    {-2/16, -3/16, -2/16, 0/16, -2/16, 2/16},
    {-2/16, -4/16, 0/16, 0/16, -3/16, 2/16},
    {0/16, -2/16, 0/16, 2/16, -1/16, 2/16},
  },
  {--simple button
    {-2/16, -2/16, 7/16, 2/16, 2/16, 8/16},
    {-1/16, -1/16, 6/16, 1/16, 1/16, 7/16},
  },
  {--simple buton pressed
    {-2/16, -2/16, 7/16, 2/16, 2/16, 8/16},
  },
  {--grid
    {-5/12, -6/12, -6/12, -4/12, -5/12, 6/12},
    {-2/12, -6/12, -6/12, -1/12, -5/12, 6/12},
    {1/12, -6/12, -6/12, 2/12, -5/12, 6/12},
    {4/12, -6/12, -6/12, 5/12, -5/12, 6/12},
    {-6/12, -6/12, -5/12, 6/12, -5/12, -4/12},
    {-6/12, -6/12, -2/12, 6/12, -5/12, -1/12},
    {-6/12, -6/12, 1/12, 6/12, -5/12, 2/12},
    {-6/12, -6/12, 4/12, 6/12, -5/12, 5/12},
  },
  {--speakers
    {-2/16, -8/16, -3/16, 2/16, -7/16, 3/16},
    {1/16, -7/16, -3/16, 2/16, -1/16, 3/16},
    {-2/16, -7/16, -3/16, -1/16, -1/16, 3/16},
    {-1/16, -2/16, -3/16, 1/16, -1/16, 3/16},
    {-1/16, -7/16, -2/16, 1/16, -2/16, -1/16},
    {-1/16, -5/16, 2/16, 1/16, -3/16, 3/16},
    {0/16, -8/16, -6/16, 1/16, -7/16, -3/16},
    {1/16, -8/16, -6/16, 2/16, -7/16, -5/16},
    {2/16, -8/16, -7/16, 3/16, -7/16, -6/16},
    {3/16, -8/16, -8/16, 4/16, -7/16, -7/16},
  },
  {--lack tafeltje
    {-8/16, -1/16, -8/16, 8/16, 0/16, 8/16},
    {7/16, -8/16, 7/16, 8/16, -1/16, 8/16},
    {-8/16, -8/16, 7/16, -7/16, -1/16, 8/16},
    {-8/16, -8/16, -8/16, -7/16, -1/16, -7/16},
    {7/16, -8/16, -8/16, 8/16, -1/16, -7/16},
  },
  {--chair
    {-7/16, -8/16, -7/16, -6/16, -6/16, -6/16},
    {6/16, -8/16, -7/16, 7/16, -6/16, -6/16},
    {6/16, -8/16, 6/16, 7/16, -6/16, 7/16},
    {-7/16, -8/16, 6/16, -6/16, -6/16, 7/16},
    {-7/16, -6/16, -7/16, 7/16, -3/16, 7/16},
    {5/16, -3/16, -7/16, 7/16, 1/16, 4/16},
    {-7/16, -3/16, -7/16, -5/16, 1/16, 4/16},
    {-7/16, -3/16, 4/16, 7/16, 6/16, 7/16},
  },
  {--Expedit wall shelf
    {-8/16, -8/16, -8/16, 8/16, -6/16, 8/16},
    {-8/16, 6/16, -8/16, 8/16, 8/16, 8/16},
    {6/16, -6/16, -8/16, 8/16, 6/16, 8/16},
    {-8/16, -6/16, -8/16, -6/16, 6/16, 8/16},
  },
  {--closer
    {-3/16, -8/16, 2/16, 3/16, -7/16, 8/16},
    {-3/16, -7/16, 2/16, -2/16, 8/16, 8/16},
    {2/16, -7/16, 2/16, 3/16, 8/16, 8/16},
    {-2/16, -3/16, 2/16, 2/16, -2/16, 8/16},
    {-2/16, 2/16, 2/16, 2/16, 3/16, 8/16},
    {-2/16, 7/16, 2/16, 2/16, 8/16, 8/16},
  },
  { --lamp
    {-1/16, -8/16, -3/16, 1/16, -7/16, 3/16},
    {-3/16, -8/16, -1/16, 3/16, -7/16, 1/16},
    {-2/16, -8/16, -2/16, 2/16, -7/16, 2/16},
    {-1/16, -7/16, -1/16, 1/16, 2/16, 1/16},
    {-2/16, 3/16, -1/16, -1/16, 4/16, 1/16},
    {-1/16, 3/16, -2/16, 1/16, 4/16, -1/16},
    {1/16, 3/16, -1/16, 2/16, 4/16, 1/16},
    {-1/16, 3/16, 1/16, 1/16, 4/16, 2/16},
    {-1/16, 2/16, 2/16, 1/16, 3/16, 3/16},
    {-1/16, 1/16, 3/16, 1/16, 2/16, 4/16},
    {-1/16, 0/16, 4/16, 1/16, 1/16, 5/16},
    {-3/16, 2/16, -1/16, -2/16, 3/16, 1/16},
    {-4/16, 1/16, -1/16, -3/16, 2/16, 1/16},
    {-5/16, 0/16, -1/16, -4/16, 1/16, 1/16},
    {-1/16, 2/16, -3/16, 1/16, 3/16, -2/16},
    {-1/16, 1/16, -4/16, 1/16, 2/16, -3/16},
    {-1/16, 0/16, -5/16, 1/16, 1/16, -4/16},
    {2/16, 2/16, -1/16, 3/16, 3/16, 1/16},
    {3/16, 1/16, -1/16, 4/16, 2/16, 1/16},
    {4/16, 0/16, -1/16, 5/16, 1/16, 1/16},
    {1/16, 0/16, 1/16, 3/16, 2/16, 3/16},
    {-3/16, 0/16, 1/16, -1/16, 2/16, 3/16},
    {-3/16, 0/16, -3/16, -1/16, 2/16, -1/16},
    {1/16, 0/16, -3/16, 3/16, 2/16, -1/16},
    {1/16, 2/16, -2/16, 2/16, 3/16, -1/16},
    {-2/16, 2/16, -2/16, -1/16, 3/16, -1/16},
    {-2/16, 2/16, 1/16, -1/16, 3/16, 2/16},
    {1/16, 2/16, 1/16, 2/16, 3/16, 2/16},
    {-2/16, 0/16, 3/16, -1/16, 1/16, 4/16},
    {-4/16, 0/16, 1/16, -3/16, 1/16, 2/16},
    {-4/16, 0/16, -2/16, -3/16, 1/16, -1/16},
    {-2/16, 0/16, -4/16, -1/16, 1/16, -3/16},
    {1/16, 0/16, -4/16, 2/16, 1/16, -3/16},
    {3/16, 0/16, -2/16, 4/16, 1/16, -1/16},
    {3/16, 0/16, 1/16, 4/16, 1/16, 2/16},
    {1/16, 0/16, 3/16, 2/16, 1/16, 4/16},
  },
  {--urinoir
    {-4/16, -5/16, 7/16, 3/16, 8/16, 8/16},
    {-4/16, 7/16, 6/16, 3/16, 8/16, 7/16},
    {-5/16, -6/16, 6/16, -4/16, 7/16, 7/16},
    {3/16, -6/16, 6/16, 4/16, 7/16, 7/16},
    {-5/16, -6/16, 1/16, -4/16, -3/16, 6/16},
    {3/16, -6/16, 1/16, 4/16, -3/16, 6/16},
    {-4/16, -6/16, 1/16, 3/16, -5/16, 6/16},
    {-4/16, -5/16, 5/16, 3/16, -4/16, 7/16},
    {-4/16, -5/16, 0/16, 3/16, -3/16, 1/16},
    {-5/16, -3/16, 3/16, -4/16, -1/16, 6/16},
    {3/16, -3/16, 3/16, 4/16, -1/16, 6/16},
  },
  
  {--other table
    {-6/16, -8/16, -6/16, -4/16, 7/16, -4/16},
    {-8/16, 7/16, -8/16, 8/16, 8/16, 8/16},
    {4/16, -8/16, 4/16, 6/16, 7/16, 6/16},
    {-6/16, -8/16, 4/16, -4/16, 7/16, 6/16},
    {4/16, -8/16, -6/16, 6/16, 7/16, -4/16},
  },
  {--worm
    {-1/16, -8/16, 5/16, 3/16, -7/16, 7/16},
    {-2/16, -8/16, 4/16, 0/16, -7/16, 6/16},
    {-3/16, -8/16, 1/16, -1/16, -7/16, 5/16},
    {-2/16, -8/16, 0/16, 0/16, -7/16, 2/16},
    {-1/16, -8/16, -1/16, 1/16, -7/16, 1/16},
    {0/16, -8/16, -2/16, 2/16, -7/16, 0/16},
    {1/16, -8/16, -5/16, 3/16, -7/16, -1/16},
    {0/16, -8/16, -6/16, 2/16, -7/16, -4/16},
    {-3/16, -8/16, -7/16, 1/16, -7/16, -5/16},

  },
  
  { --coal thing
    {-2/12, -2/12, -7/12, 2/12, 2/12, -6/12},
    {-2/12, -2/12, 6/12, 2/12, 2/12, 7/12},
    {6/12, -2/12, -2/12, 7/12, 2/12, 2/12},
    {-7/12, -2/12, -2/12, -6/12, 2/12, 2/12},
    {-6/12, -6/12, -6/12, 6/12, 6/12, 6/12},
  },
  {
    {-1/16, -1/16, -3/16, 1/16, 0/16, 3/16},
    {-3/16, -1/16, -1/16, 3/16, 0/16, 1/16},
    {-2/16, -1/16, -2/16, 2/16, 0/16, 2/16},
    {-2/16, -4/16, -1/16, 2/16, -3/16, 1/16},
    {-1/16, -4/16, -2/16, 1/16, -3/16, 2/16},
    {-1/16, -8/16, -1/16, 1/16, 1/16, 1/16},
  }
  
}

for i, nodebox in ipairs(node_boxes) do
  minetest.register_node("nodeboxer:test_"..i, {
    drawtype = "nodebox",
    paramtype2 = "facedir",
    description = "Debug: "..i,
    paramtype = "light",
    groups = {dig_immediate=3,not_in_creative_inventory=1},
    tiles = {"wool_blue.png"},
    node_box = { --VanessaE's wild hive nodebox contribution
      type = "fixed",
      fixed = nodebox,
    }
  })
end


--crafts
minetest.register_craft({
  output = 'nodeboxer:draw',
  recipe = {
    {'nodeboxer:paint'},
  }
})

minetest.register_craft({
  output = 'nodeboxer:paint',
  recipe = {
    {'nodeboxer:draw'},
  }
})
